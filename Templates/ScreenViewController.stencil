// sourcery:file:{{ argument.moduleName }}/{{ argument.screenName }}/{{ argument.moduleName }}{{ argument.screenName }}ViewController.swift
import UIKit
import RxSwift
import RxSwiftExt
import RxCocoa
import SnapKit

final class {{ argument.moduleName }}{{ argument.screenName }}ViewController: UIViewController {

    private let viewModel: {{ argument.moduleName }}{{ argument.screenName }}ViewModelProtocol

    init(viewModel: {{ argument.moduleName }}{{ argument.screenName }}ViewModelProtocol) {
        self.viewModel = viewModel

        super.init()
    }

    override func viewDidLoad() {
        super.viewDidLoad()

        configureViewHierarchy()
        configureLayout()
        configureViews()
        configureBindings()
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)

        configureNavigationBar()
    }

    private func configureViewHierarchy() {
        // TODO: view.addSubviews(...) ðŸ”¥ðŸ”¥ðŸ”¥
    }

    private func configureLayout() {
        // TODO: implement!!! ðŸ”¥ðŸ”¥ðŸ”¥
    }

    private func configureViews() {
        view.backgroundColor = .white // TODO: implement!!! ðŸ”¥ðŸ”¥ðŸ”¥
    }

    private func configureNavigationBar() {
        navigationController?.navigationBar.tintColor = .white // TODO: fix!!! ðŸ”¥ðŸ”¥ðŸ”¥
        navigationItem.leftBarButtonItem?.tintColor = .black // TODO: fix!!! ðŸ”¥ðŸ”¥ðŸ”¥
    }

    private func configureBindings() {
        // TODO: implement!!! ðŸ”¥ðŸ”¥ðŸ”¥

        viewModel.onAllDriversBoundTo(view: self)
    }
}

extension {{ argument.moduleName }}{{ argument.screenName }}ViewController: {{ argument.moduleName }}{{ argument.screenName }}ViewProtocol {

    var viewWillAppear: Observable<Bool> {
        return rx.viewWillAppear
    }

    // TODO: ... ðŸ”¥ðŸ”¥ðŸ”¥
}
// sourcery:end
