// sourcery:file:{{ argument.unitTestDir }}/{{ argument.screenName }}/{{ argument.moduleName }}{{ argument.screenName }}EventsSourceSpec.swift
import Nimble
import Quick
import RxSwift
import RxTest
import Cuckoo
import TestUtils
@testable import {{ argument.targetName }}

final class {{ argument.moduleName }}{{ argument.screenName }}EventsSourceSpec: QuickSpec {

    // swiftlint:disable:next function_body_length
    override func spec() {
        super.spec()

        describe("{{ argument.moduleName }}{{ argument.screenName }}EventsSource") {
            var eventsSource: {{ argument.moduleName }}{{ argument.screenName }}EventsSource!
            var viewMock: Mock{{ argument.moduleName }}{{ argument.screenName }}ViewProtocol!
            var scheduler: TestScheduler!
            var disposeBag: DisposeBag!
            beforeEach {
                scheduler = TestScheduler(initialClock: 0)
                disposeBag = DisposeBag()

                viewMock = Mock{{ argument.moduleName }}{{ argument.screenName }}ViewProtocol()
                eventsSource = {{ argument.moduleName }}{{ argument.screenName }}EventsSource()
            }

            describe("events stream from view") {
                var observer: TestableObserver<{{ argument.moduleName }}{{ argument.screenName }}.Event>!
                beforeEach {
                    observer = scheduler.createObserver({{ argument.moduleName }}{{ argument.screenName }}.Event.self)
                }

                context("view streams emit no events") {
                    beforeEach {
                        stub(viewMock) { stub in
                            when(stub.viewWillAppear.get).thenReturn(.never())
                            // TODO: ... ðŸ”¥ðŸ”¥ðŸ”¥
                        }

                        eventsSource.eventsFrom(view: viewMock)
                            .subscribe(observer)
                            .disposed(by: disposeBag)
                    }
                    it("must emit .next(.refresh) event only") {
                        expect(observer.events.map { $0.value }).to(equal([.next(.refresh)]))
                    }
                }

                context("view's viewWillAppear stream emit true event") {
                    beforeEach {
                        stub(viewMock) { stub in
                            when(stub.viewWillAppear.get).thenReturn(.just(true))
                            // TODO: ... ðŸ”¥ðŸ”¥ðŸ”¥
                        }

                        eventsSource.eventsFrom(view: viewMock)
                            .subscribe(observer)
                            .disposed(by: disposeBag)
                    }
                    it("must emit .next(.refresh) event twice and .completed") {
                        expect(observer.events.map { $0.value })
                            .to(equal([.next(.refresh), .next(.refresh), .completed]))
                    }
                }

                // TODO: test other view streams... ðŸ”¥ðŸ”¥ðŸ”¥
            }
        }
    }
}
// sourcery:end
